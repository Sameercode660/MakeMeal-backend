// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid())
  name        String
  email       String      @unique
  password    String
  phoneNumber String
  createdAt   DateTime    @default(now())
  Cart        Cart[]
  Order       Order[]
  Complaint   Complaint[]
  Remark      Remark[]
}

model Admin {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String @unique
}

model Product {
  productId       String    @id @default(uuid())
  restaurantId    Int       @default(164)
  name            String
  description     String
  price           Int
  category        String
  imageUrl        String
  preparationTime String
  isFeatured      Boolean
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  tags            String[]
  discount        Int
  ingredient      String
  calories        String
  availability    Boolean   @default(true)
  Cart            Cart[]
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  productId String
  amount    Int
  quantity  Int
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [productId])
}

model Order {
  id          String      @id @default(uuid())
  orderNumber String?     @unique
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  items       Json
  totalPrice  Int
  status      String      @default("preparing")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Complaint   Complaint[]
  Remark      Remark[]

  @@index([userId])
}

model Complaint {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  title       String
  description String
  status      String   @default("OPEN")
  category    String
  Remark      Remark[]
}

model Remark {
  id          String    @id @default(uuid())
  complaintId String
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  orderId     String
  order       Order     @relation(fields: [orderId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  remark      String
}
